                  ;NAMEREG S1,
                  ;NAMEREG S2,HH
                  ;NAMEREG S3,TOGL_REG
                  NAMEREG s0, REG1
                  NAMEREG s1, REG2
                  NAMEREG s2, DDATA
                  NAMEREG s3, REG
                  NAMEREG s4, REG4
                  NAMEREG s5, TEMP
                  NAMEREG s6, DATA
                  NAMEREG s7, CNTR1
                  NAMEREG s8, CNTR2
                  NAMEREG s9, SPI_REG
                  NAMEREG sA, ADDR1                  ; LSB ADDRES
                  NAMEREG sB, ADDR2
                  NAMEREG sC, ADDR3
                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                  ;--------------------------------------------------
                  CONSTANT RX_DT_RDY, 02             ;////// INPUT
                  CONSTANT RX_DATA, 03               ;////// INPUT
                  CONSTANT LED, 01
                  CONSTANT TX_DATA, 02
                  CONSTANT TX_STB, 03
                  CONSTANT RD_PULSE, 04
                  ;//USB
                  CONSTANT USB_DATA_OUT, 0B          ;;DSOUT     2
                  CONSTANT USB_DATA_IN, 02           ;;DSIN      1
                  CONSTANT USB_RD_WR, 0A             ;;DSOUT     3
                  CONSTANT usb_rxf, 04               ;;DSIN      3
                  CONSTANT usb_txe, 03               ;;DSIN      2
                  CONSTANT usb_rd, 0C                ;;DSOUT     1
                  CONSTANT usb_wr, 09                ;;DSOUT     4
                  ;// BRAM
                  CONSTANT BRAM_DATA_IN, 05          ;;DSIN      1
                  CONSTANT BRAM_W, 08                ;;DSOUT     1
                  CONSTANT BRAM_ADR_70, 06           ;;DSOUT     1
                  CONSTANT BRAM_ADR_158, 07          ;;DSOUT
                  CONSTANT BRAM_DATA_OUT, 05         ;;DSOUT
                  ;//////////ddr write
                  CONSTANT DDR_DATA_W_31_24, 13'd    ;;DSOUT
                  CONSTANT DDR_DATA_W_23_16, 14'd    ;;DSOUT
                  CONSTANT DDR_DATA_W_15_8, 15'd     ;;DSOUT
                  CONSTANT DDR_DATA_W_7_0, 16'd      ;;DSOUT
                  CONSTANT CMD_WR_PLS, 17'd          ;;DSOUT
                  CONSTANT WR_EN_PLS, 18'd           ;;DSOUT
                  CONSTANT WR_RD_CMD, 19'd           ;;DSOUT  ;;;0 for write 1 for read
                  ;//////////ddr_read
                  CONSTANT DDR_DATA_R_31_24, 06'd    ;;DSIN
                  CONSTANT DDR_DATA_R_23_16, 07'd    ;;DSIN
                  CONSTANT DDR_DATA_R_15_8, 08'd     ;;DSIN
                  CONSTANT DDR_DATA_R_7_0, 09'd      ;;DSIN
                  CONSTANT READ_EMPTY, 12'd          ;;DSIN
                  CONSTANT DDR_ADDRESS_INC_PLS, 21'd ;;DSOUT
                  CONSTANT RD_EN_PLS, 22'd           ;;DSOUT
                  CONSTANT DDR_ADDRESS_RESET_W, 23'd ;;DSOUT
                  CONSTANT DDR_ADDRESS_RESET_R, 23'd ;;DSOUT
                  ;*************************
                  ;; SCRATCHPAD MEMORY
                  ;*************************
                  ;;;;;;Register interface
                  CONSTANT USER_REGADDR_15_8, 25'd   ;;DSOUT
                  CONSTANT USER_REGADDR_7_0, 26'd    ;;DSOUT
                  CONSTANT USER_REGDATAOUT, 27'd     ;;DSOUT
                  CONSTANT USER_REGWE, 8'd           ;;DSOUT
                  CONSTANT USER_REGRE, 20'd          ;;DSOUT
                  CONSTANT USER_REGDATAIN, 13'd      ;;DSIN
                  ;;;;;;;;;;;;
                  CONSTANT USER_READ_START, 4'd      ;;DSOUT
                  CONSTANT USER_DDR_DATA1, 1'd       ;;DSIN
                  CONSTANT USER_DDR_DATA2, 0'd       ;;DSIN
                  CONSTANT USER_DDR_DATA3, 15'd      ;;DSIN
                  CONSTANT USER_DDR_DATA4, 14'd      ;;DSIN
                  CONSTANT USER_DDR_DATA5, 17'd      ;;DSIN
                  CONSTANT USER_DDR_DATA6, 18'd      ;;DSIN
                  CONSTANT USER_DDR_DATA7, 19'd      ;;DSIN
                  CONSTANT USER_DDR_DATA8, 21'd      ;;DSIN
                  CONSTANT UR_DATA_RAM, 01
                  CONSTANT DDR_BRAM, 02
                  CONSTANT CMD_WR_RD, 03
                  CONSTANT ST_ADD_1, 04
                  CONSTANT ST_ADD_2, 05
                  CONSTANT N_OF_BYTE1, 06
                  CONSTANT N_OF_BYTE2, 07
                  CONSTANT BT_CNT1, 08
                  CONSTANT BT_CNT2, 09
                  CONSTANT BUFF_AD1, 0A
                  CONSTANT BUFF_AD2, 0B
                  ;CONSTANT UR_DATA_RAM,01
                  ;CONSTANT UR_DATA_RAM,01
                  ;CONSTANT UR_DATA_RAM,01
                  CONSTANT DELL1, 36
                  CONSTANT DELL2, 37
                  CONSTANT DELL3, 38
                  CONSTANT DELL4, 39
                  CONSTANT DELL5, 3A
                  CONSTANT DELL6, 3B
                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                  CONSTANT RDID_9F, 9F
                  CONSTANT WREN_06, 06
                  CONSTANT PP_02, 02
                  CONSTANT READ_03, 03
                  CONSTANT RDSR_05, 05
                  CONSTANT SE_D8, D8
                  CONSTANT WRSR_01, 01
                  CONSTANT BE_C7, C7
                  CONSTANT DELAY_1US_CONSTANT, 0B    ;CONSTANT VALUE FOR DELAY RUTNS
                  CALL send_one_bt_usb
       TEST_USER: 
                  LOAD DDATA, FF
                  OUTPUT DDATA, USER_READ_START
                  LOAD DDATA, 00
                  OUTPUT DDATA, USER_READ_START
                  INPUT DDATA, USER_DDR_DATA1
                  CALL send_one_bt_usb
                  INPUT DDATA, USER_DDR_DATA2
                  CALL send_one_bt_usb
                  INPUT DDATA, USER_DDR_DATA3
                  CALL send_one_bt_usb
                  INPUT DDATA, USER_DDR_DATA4
                  CALL send_one_bt_usb
                  INPUT DDATA, USER_DDR_DATA5
                  CALL send_one_bt_usb
                  INPUT DDATA, USER_DDR_DATA6
                  CALL send_one_bt_usb
                  INPUT DDATA, USER_DDR_DATA7
                  CALL send_one_bt_usb
                  INPUT DDATA, USER_DDR_DATA8
                  CALL send_one_bt_usb
                  JUMP TEST_USER
                  ;$ G 12 04 R/W # DATA
     CHECK_FRAME: ;$ D/B 12 34 R/W #** DATA
                  CALL take_data_in_usb
                  COMPARE DDATA, "$"
                  JUMP NZ, CHECK_FRAME
                  CALL take_data_in_usb
                  STORE DDATA, DDR_BRAM
                  CALL take_data_in_usb              ;START ADDR1
                  STORE DDATA, ST_ADD_2
                  CALL take_data_in_usb              ;START ADDR2
                  STORE DDATA, ST_ADD_1
                  CALL take_data_in_usb              ;NO OF BYTES1
                  STORE DDATA, N_OF_BYTE2
                  CALL take_data_in_usb              ;;NO OF BYTES2;;;;;7 TO 0
                  STORE DDATA, N_OF_BYTE1
                  CALL take_data_in_usb
                  STORE DDATA, CMD_WR_RD
                  CALL take_data_in_usb
                  COMPARE DDATA, "#"
                  JUMP NZ, CHECK_FRAME
           START: 
                  FETCH DDATA, DDR_BRAM
                  COMPARE DDATA, "G"
                  JUMP Z, REG_CONTROL
                  FETCH DDATA, CMD_WR_RD
                  COMPARE DDATA, "R"
                  CALL Z, RD_DDR_RAM
                  COMPARE DDATA, "W"
                  CALL Z, WR_DDR_RAM
                  JUMP CHECK_FRAME
                  ;
                  JUMP CHECK_FRAME
            HJGF: JUMP HJGF
      WR_DDR_RAM: 
                  OUTPUT REG1, DDR_ADDRESS_RESET_W
                  FETCH REG1, ST_ADD_1
                  STORE REG1, BUFF_AD1
                  FETCH REG1, ST_ADD_2
                  STORE REG1, BUFF_AD2
                  LOAD REG1, 00
                  STORE REG1, BT_CNT1
                  STORE REG1, BT_CNT2
    TAKE_NXT_BYT: 
                  FETCH DDATA, DDR_BRAM
                  COMPARE DDATA, "D"
                  JUMP Z, WR_DDR
                  FETCH DDATA, DDR_BRAM
                  COMPARE DDATA, "B"
                  JUMP Z, WR_BRAM
                  RETURN 
          WR_DDR: 
                  CALL WRITE_1_WORD_DDR
                  JUMP NXT_LOOP
         WR_BRAM: 
                  CALL take_data_in_usb
                  CALL WR_BRAM_DATA
        NXT_LOOP: 
                  FETCH CNTR1, BT_CNT1
                  FETCH CNTR2, BT_CNT2
                  ADD CNTR1, 01
                  ADDCY CNTR2, 00
                  STORE CNTR1, BT_CNT1
                  STORE CNTR2, BT_CNT2
                  FETCH ADDR1, N_OF_BYTE1
                  FETCH ADDR2, N_OF_BYTE2
                  COMPARE ADDR1, CNTR1
                  JUMP NZ, TAKE_NXT_BYT
                  COMPARE ADDR2, CNTR2
                  JUMP NZ, TAKE_NXT_BYT
                  RETURN 
      RD_DDR_RAM: 
                  OUTPUT REG1, DDR_ADDRESS_RESET_R
                  LOAD REG1, 00
                  STORE REG1, BT_CNT1
                  STORE REG1, BT_CNT2
                  FETCH REG1, ST_ADD_1
                  STORE REG1, BUFF_AD1
                  FETCH REG1, ST_ADD_2
                  STORE REG1, BUFF_AD2
    SEND_NXT_BYT: 
                  FETCH DDATA, DDR_BRAM
                  COMPARE DDATA, "D"
                  JUMP Z, RD_DDR
                  FETCH DDATA, DDR_BRAM
                  COMPARE DDATA, "B"
                  JUMP Z, RD_BRAM
                  RETURN 
          RD_DDR: 
                  CALL READ_1_WORD_DDR
                  JUMP NXT_LOOP1
         RD_BRAM: 
                  CALL INC_BRAM_ADDRESS
                  INPUT DDATA, BRAM_DATA_IN
                  CALL send_one_bt_usb
       NXT_LOOP1: 
                  FETCH CNTR1, BT_CNT1
                  FETCH CNTR2, BT_CNT2
                  ADD CNTR1, 01
                  ADDCY CNTR2, 00
                  STORE CNTR1, BT_CNT1
                  STORE CNTR2, BT_CNT2
                  FETCH ADDR1, N_OF_BYTE1
                  FETCH ADDR2, N_OF_BYTE2
                  COMPARE ADDR1, CNTR1
                  JUMP NZ, SEND_NXT_BYT
                  COMPARE ADDR2, CNTR2
                  JUMP NZ, SEND_NXT_BYT
                  RETURN 
    WR_BRAM_DATA: 
                  OUTPUT DDATA, BRAM_DATA_OUT
                  CALL INC_BRAM_ADDRESS
                  RETURN 
INC_BRAM_ADDRESS: FETCH ADDR1, BUFF_AD1
                  FETCH ADDR2, BUFF_AD2
                  ADD ADDR1, 01
                  ADDCY ADDR2, 00
                  OUTPUT ADDR1, BRAM_ADR_70
                  OUTPUT ADDR2, BRAM_ADR_158
                  STORE ADDR1, BUFF_AD1
                  STORE ADDR2, BUFF_AD2
                  RETURN 
  CHK_DT_PRESENT: 
                  INPUT REG1, RX_DT_RDY
                  COMPARE REG1, 00000001'b
                  JUMP NZ, CHK_DT_PRESENT
                  OUTPUT REG1, RD_PULSE
                  INPUT REG1, RX_DATA
                  OUTPUT REG1, LED
                  RETURN 
 send_one_bt_usb: 
      wr_rdy_chk: 
                  INPUT REG1, usb_txe
                  TEST REG1, 00000001'b
                  JUMP NZ, wr_rdy_chk
                  LOAD REG1, 00
                  OUTPUT REG1, USB_RD_WR
                  OUTPUT DDATA, USB_DATA_OUT
                  LOAD REG1, 00
                  OUTPUT REG1, usb_wr
                  LOAD REG1, FF
                  OUTPUT REG1, usb_wr
                  CALL DELAY_107US
                  CALL DELAY_107US
                  LOAD REG1, FF
                  OUTPUT REG1, USB_RD_WR
                  RETURN 
take_data_in_usb: 
                  INPUT REG1, usb_rxf
                  TEST REG1, 00000001'b
                  JUMP NZ, take_data_in_usb
                  LOAD REG1, FF
                  OUTPUT REG1, USB_RD_WR
                  OUTPUT REG1, usb_rd
                  INPUT DDATA, USB_DATA_IN
                  RETURN 
       LED_BLINK: 
             LP1: SUB REG1, 01
                  LOAD DATA, AA
                  OUTPUT DATA, LED
                  CALL DELAY_20MS
                  CALL DELAY_20MS
                  LOAD DATA, 55
                  OUTPUT DATA, LED
                  CALL DELAY_20MS
                  CALL DELAY_20MS
                  CALL DELAY_20MS
                  CALL DELAY_20MS
                  COMPARE REG1, 00
                  JUMP NZ, LP1
                  RETURN 
    DATA_OUT_DDR: 
                  CALL take_data_in_usb
                  OUTPUT DDATA, DDR_DATA_W_31_24
                  CALL take_data_in_usb
                  OUTPUT DDATA, DDR_DATA_W_23_16
                  CALL take_data_in_usb
                  OUTPUT DDATA, DDR_DATA_W_15_8
                  CALL take_data_in_usb
                  OUTPUT DDATA, DDR_DATA_W_7_0
                  OUTPUT DDATA, WR_EN_PLS
                  RETURN 
WRITE_1_WORD_DDR: 
                  CALL DATA_OUT_DDR
                  CALL DATA_OUT_DDR
                  ;OUTPUT DDATA,WR_EN_PLS
                  LOAD DDATA, 00                     ; write cmd
                  OUTPUT DDATA, WR_RD_CMD            ; write cmd
                  OUTPUT DDATA, CMD_WR_PLS
                  OUTPUT DDATA, DDR_ADDRESS_INC_PLS
                  RETURN 
 READ_1_WORD_DDR: 
                  LOAD DDATA, 01                     ; READ cmd
                  OUTPUT DDATA, WR_RD_CMD            ; READ cmd
                  OUTPUT DDATA, CMD_WR_PLS
  WAIT_FOR_DATA1: INPUT REG1, READ_EMPTY
                  COMPARE REG1, 01
                  JUMP Z, WAIT_FOR_DATA1
                  CALL DATA_IN_DDR
                  CALL DATA_IN_DDR
                  OUTPUT DDATA, DDR_ADDRESS_INC_PLS
                  RETURN 
     DATA_IN_DDR: 
   WAIT_FOR_DATA: INPUT REG1, READ_EMPTY
                  COMPARE REG1, 01
                  JUMP Z, WAIT_FOR_DATA
                  ;CALL DELAY_1S
                  INPUT DDATA, DDR_DATA_R_31_24
                  CALL send_one_bt_usb
                  INPUT DDATA, DDR_DATA_R_23_16
                  CALL send_one_bt_usb
                  INPUT DDATA, DDR_DATA_R_15_8
                  CALL send_one_bt_usb
                  INPUT DDATA, DDR_DATA_R_7_0
                  CALL send_one_bt_usb
                  OUTPUT DDATA, RD_EN_PLS
                  RETURN 
     REG_CONTROL: 
                  FETCH DDATA, CMD_WR_RD
                  COMPARE DDATA, "W"
                  JUMP Z, W_USER_REG
                  COMPARE DDATA, "R"
                  JUMP Z, R_USER_REG
                  JUMP CHECK_FRAME
      W_USER_REG: FETCH DDATA, ST_ADD_2
                  OUTPUT DDATA, USER_REGADDR_15_8
                  FETCH DDATA, ST_ADD_1
                  OUTPUT DDATA, USER_REGADDR_7_0
                  FETCH DDATA, N_OF_BYTE2            ;; NOT USED
                  FETCH DDATA, N_OF_BYTE1
                  OUTPUT DDATA, USER_REGDATAOUT
                  LOAD DDATA, FF
                  OUTPUT DDATA, USER_REGWE           ;; WRITE ENABLE PULSE
                  LOAD DDATA, 00
                  OUTPUT DDATA, USER_REGWE           ;; WRITE ENABLE PULSE
                  JUMP CHECK_FRAME
      R_USER_REG: 
                  FETCH DDATA, ST_ADD_2
                  OUTPUT DDATA, USER_REGADDR_15_8
                  FETCH DDATA, ST_ADD_1
                  OUTPUT DDATA, USER_REGADDR_7_0
                  FETCH DDATA, N_OF_BYTE2            ;; NOT USED
                  FETCH DDATA, N_OF_BYTE1            ;; NOT USED
                  OUTPUT DDATA, USER_REGRE           ;; READ ENABLE PULSE
                  LOAD DDATA, "%"
                  CALL send_one_bt_usb
                  INPUT DDATA, USER_REGDATAIN
                  CALL send_one_bt_usb
                  LOAD DDATA, "#"
                  CALL send_one_bt_usb
                  JUMP CHECK_FRAME
                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ALL DELAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                  ;--
                  ;|1000000/416NS
                  ;|--------------------------===== CNT
                  ;|10
                  ;|--------
                  ; 10US IS 1000     (1000000/416 = 000018 HEX)   FOR 24MHZ
      DELAY_10US: 
                  LOAD sF, 00
                  LOAD sE, 00
                  LOAD sD, 18
                  JUMP SOFTWARE_DELAY
                  ; 10US IS 1000     (1000000/416 = 000101 HEX)   FOR 24MHZ
     DELAY_107US: 
                  LOAD sF, 00
                  LOAD sE, 01
                  LOAD sD, 01
                  JUMP SOFTWARE_DELAY
                  ; 1MS IS 1000     (1000/416 = 000963 HEX)   FOR 24MHZ
       DELAY_1MS: 
                  LOAD sF, 00
                  LOAD sE, 09
                  LOAD sD, 63
                  JUMP SOFTWARE_DELAY
                  ;
                  ; 20MS IS 20,000  100NS  (20,000/416 = 00BBCD HEX)  FOR 24MHZ
      DELAY_20MS: LOAD sF, 00
                  LOAD sE, 5D
                  LOAD sD, C9
                  JUMP SOFTWARE_DELAY
                  ;
                  ;
                  ; 1S IS 10,000,00 X 10NS      (1/416 = 24AE06 HEX)  FOR 24MHZ
        DELAY_1S: LOAD sF, 24
                  LOAD sE, AE
                  LOAD sD, 06
                  JUMP SOFTWARE_DELAY
                  ;
                  ; THE DELAY LOOP DECREMENTS [S2,S1,S0] UNTIL IT REACHES ZERO
                  ; EACH DECREMENT CYCLE IS 5 INSTRUCTIONS WHICH IS 10 CLOCK CYCLES (416NS AT 24MHZ)
  SOFTWARE_DELAY: LOAD sD, sD                        ;PAD LOOP TO MAKE IT 10 CLOCK CYCLES (5 INSTRUCTIONS)
                  SUB sD, 1'd
                  SUBCY sE, 0'd
                  SUBCY sF, 0'd
                  JUMP NZ, SOFTWARE_DELAY
                  RETURN 
                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
